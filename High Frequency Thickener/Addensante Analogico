// This is a modified version of the Event Horizon Clipper/Limiter by Scott Stillwell.
// It works only on high frequencies and gives to the track an analog feel.
//
// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  

// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.

desc:Addensatore Analogico
desc:Addensatore Analogico - Limiter HF

slider1:0.0<-30.0,0.0,0.1>Threshold
slider2:-0.1<-20.0,0.0,0.1>Ceiling
slider3:0<0,1200,1>Release (ms) (0=auto)
slider4:8000<0,22000,1>Crossover (Hz)
slider5:0<-60,12,0.1>HF Post Gain (dB)

in_pin:left input
in_pin:right input
out_pin:output left
out_pin:output right

@init
cDenorm=10^-30;
pi = 3.1415926535;
log2db = 8.6858896380650365530225783783321; // 20 / ln(10)
db2log = 0.11512925464970228420089957273422; // ln(10) / 20 
attime=0.004;
reltime=0.200;
atcoef=exp(-1/(attime * srate));
relcoef=exp(-1/(reltime * srate));

@slider
thresh=exp(slider1 * db2log);
threshdb=slider1;
ceiling=exp(slider2 * db2log);
ceildb=slider2;
makeup=exp((ceildb-threshdb) * db2log);
makeupdb=ceildb-threshdb;
peakdb = ceildb+25;
peaklvl = exp(peakdb * db2log);
release=slider3/1000;
release==0 ? (reltime = overdb / 125) : (reltime = release);
relcoef=exp(-1/(reltime * srate));
  
freqLP = min(slider4,srate);
xLP = exp(-2.0*$pi*freqLP/srate);
a0LP = 1.0-xLP;
b1LP = -xLP;
  
vol = exp(slider5/log2db);

@sample

s0 = spl0;
s1 = spl1;

sLFl = (tmplLP = a0LP*s0 - b1LP*tmplLP + cDenorm);
sLFr = (tmprLP = a0LP*s1 - b1LP*tmprLP + cDenorm);

sHF0 = s0 - (tmplLP = a0LP*s0 - b1LP*tmplLP + cDenorm);
sHF1 = s1 - (tmprLP = a0LP*s1 - b1LP*tmprLP + cDenorm);

sHF0=sHF0*makeup;
sHF1=sHF1*makeup;

abs0=abs(sHF0);
abs1=abs(sHF1);
overdbv = max(abs0, abs1);
overdb = 2.08136898 * log(overdbv) * log2db - ceilingdb;

overdb > rundb ? (                                  // calculate overshoot (and thus GR)
  rundb = overdb + atcoef * (rundb - overdb);       //    use attack and release to 
  ) : (                                               //    smoothly scale gain reduction
  rundb = overdb + relcoef * (rundb - overdb);
  );
overdb = max(0,rundb);

release == 0 ? (                                    // Auto-release?  Compute release time
  overdb > maxover ? (
    maxover = overdb;
    reltime = overdb / 125;                         // release at constant 125 dB/sec.
    relcoef = exp(-1/(reltime * srate));
  );
  runmax = maxover + relcoef * (runmax - maxover);  // highest peak for setting att/rel decays in reltime
  maxover = runmax;
);
  
gr = exp(overdb * db2log);

sHF0*=gr;
sHF1*=gr;
  
sHF0=min(ceiling,abs(sHF0))*sign(sHF0);             // If it gets past the limiter, whack it.
sHF1=min(ceiling,abs(sHF1))*sign(sHF1);             // since we don't lookahead, some stuff will

sHF0*=vol;
sHF1*=vol;

spl0 = (sLFl + sHF0);
spl1 = (sLFr + sHF1);