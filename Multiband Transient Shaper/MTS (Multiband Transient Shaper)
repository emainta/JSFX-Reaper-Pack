// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.

/* 
Based on Michael Gruhn JSFX:
  - 4-Band Splitter (LOSER)
  - 4-Band EQ (LOSER)
  - Transient Controller
(C) 2006, Michael Gruhn.
*/
desc:MTS (Multiband Transient Shaper)
desc:Multiband Transient Shaper

// LOW
slider1:0<-24,24,1>Low Gain(dB)

slider2:0<-100,100,1>Attack (%)
slider3:0<-100,100,1>Sustain (%)

slider4:200<0,22000,1>Frequency (Hz) //slider2
// LOW MID
slider5:0<-24,24,1>Low Mid Gain(dB) //slider3

slider6:0<-100,100,1>Attack (%)
slider7:0<-100,100,1>Sustain (%)

slider8:2000<0,22000,1>Frequency (Hz) //slider4

// HIGH MID
slider9:0<-24,24,1>High Mid Gain(dB) //slider5

slider10:0<-100,100,1>Attack (%)
slider11:0<-100,100,1>Sustain (%)

slider12:5000<0,22000,1>Frequency (Hz) //slider6

// HIGH

slider13:0<-24,24,1>High Gain(dB) //slider7

slider14:0<-100,100,1>Attack (%)
slider15:0<-100,100,1>Sustain (%)

// General

slider16:0<-24,24,1>Output (dB) //slider8


// Pins
in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
//EQ
cDenorm=10^-30;
cAmpDB = 8.65617025;

//TD
b1Env1 = -exp(-30 / srate );
a0Env1 = 1.0 + b1Env1;
b1Env2 = -exp(-1250 / srate );
a0Env2 = 1.0 + b1Env2;
b1Env3 = -exp(-3 / srate );
a0Env3 = 1.0 + b1Env3;

@slider
//eq
lVol = exp(slider1/cAmpDB); 

lmVol = exp(slider5/cAmpDB); 
hmVol = exp(slider9/cAmpDB); 
hVol = exp(slider13/cAmpDB); 
outVol = exp(slider16/cAmpDB); 

freqHI = max(min(slider12,srate),slider8);
xHI = exp(-2.0*$pi*freqHI/srate);
a0HI = 1.0-xHI;
b1HI = -xHI;

freqMID = max(min(min(slider8,srate),slider12),slider4);
xMID = exp(-2.0*$pi*freqMID/srate);
a0MID = 1.0-xMID;
b1MID = -xMID;

freqLOW = min(min(slider4,srate),slider8);
xLOW = exp(-2.0*$pi*freqLOW/srate);
a0LOW = 1.0-xLOW;
b1LOW = -xLOW;

// TRANSIENT

//LOW
attackL=slider2/100;
sustainL=slider3/50;
//vol = 2^(slider3/6);

//LOWMID
attackLM=slider6/100;
sustainLM=slider7/50;
//HIMID
attackHM=slider10/100;
sustainHM=slider11/50;
//HIGH
attackH=slider14/100;
sustainH=slider15/50;

@sample
// EQ
s0 = spl0;
s1 = spl1;

low0 = (tmplMID = a0MID*s0 - b1MID*tmplMID + cDenorm);
low1 = (tmprMID = a0MID*s1 - b1MID*tmprMID + cDenorm);

spl0 = (tmplLOW = a0LOW*low0 - b1LOW*tmplLOW + cDenorm);
spl1 = (tmprLOW = a0LOW*low1 - b1LOW*tmprLOW + cDenorm);

//this
lowS0 = low0 - spl0;
lowS1 = low1 - spl1;

hi0 = s0 - low0;
hi1 = s1 - low1;

midS0 = (tmplHI = a0HI*hi0 - b1HI*tmplHI + cDenorm);
midS1 = (tmprHI = a0HI*hi1 - b1HI*tmprHI + cDenorm);

highS0 = hi0 - midS0;
highS1 = hi1 - midS1;

//OUTPUT
//spl0 = (spl0*lVol + lowS0*lmVol + midS0*hmVol + highS0*hVol)*outVol;
//spl1 = (spl1*lVol + lowS1*lmVol + midS1*hmVol + highS1*hVol)*outVol;

//LOW TD
maxSplsL = max(abs(spl0),abs(spl1));
env1L = sqrt(tmpEnv1 = a0Env1*maxSplsL - b1Env1*tmpEnv1);
env2L = sqrt(tmpEnv2 = a0Env2*maxSplsL - b1Env2*tmpEnv2);
env3L = sqrt(tmpEnv3 = a0Env3*maxSplsL - b1Env3*tmpEnv3);

lowGain = exp(log(max(env2L/env1L,1))*attackL) * exp( log( max(env3L/env1L,1))*sustainL); //gain

//spl0 *= gain;
//spl1 *= gain;

//LOWMID TD
maxSplsLM = max(abs(lowS0),abs(lowS1));
env1LM = sqrt(tmpEnv1 = a0Env1*maxSplsLM - b1Env1*tmpEnv1);
env2LM = sqrt(tmpEnv2 = a0Env2*maxSplsLM - b1Env2*tmpEnv2);
env3LM = sqrt(tmpEnv3 = a0Env3*maxSplsLM - b1Env3*tmpEnv3);

lowMidGain = exp(log(max(env2LM/env1LM,1))*attackLM) * exp( log( max(env3LM/env1LM,1))*sustainLM); //gain

//HIGH-MID TD
maxSplsHM = max(abs(midS0),abs(midS1));
env1HM = sqrt(tmpEnv1 = a0Env1*maxSplsHM - b1Env1*tmpEnv1);
env2HM = sqrt(tmpEnv2 = a0Env2*maxSplsHM - b1Env2*tmpEnv2);
env3HM = sqrt(tmpEnv3 = a0Env3*maxSplsHM - b1Env3*tmpEnv3);

hiMidGain = exp(log(max(env2HM/env1HM,1))*attackHM) * exp( log( max(env3HM/env1HM,1))*sustainHM); //gain

//HIGH TD
maxSplsH = max(abs(highS0),abs(highS1));
env1H = sqrt(tmpEnv1 = a0Env1*maxSplsH - b1Env1*tmpEnv1);
env2H = sqrt(tmpEnv2 = a0Env2*maxSplsH - b1Env2*tmpEnv2);
env3H = sqrt(tmpEnv3 = a0Env3*maxSplsH - b1Env3*tmpEnv3);

highGain = exp(log(max(env2H/env1H,1))*attackH) * exp( log( max(env3H/env1H,1))*sustainH); //gain


// OUTPUT
spl0 = (spl0*lVol*lowGain + lowS0*lmVol*lowMidGain + midS0*hmVol*hiMidGain + highS0*hVol*highGain)*outVol;
spl1 = (spl1*lVol*lowGain + lowS1*lmVol*lowMidGain + midS1*hmVol*hiMidGain + highS1*hVol*highGain)*outVol;
